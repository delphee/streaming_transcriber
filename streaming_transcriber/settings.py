"""
Django settings for streaming_transcriber project.

Generated by 'django-admin startproject' using Django 5.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os

print("Reading settings...")

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
DEBUG = True

AWS_STORAGE_BUCKET_NAME = 'servicebid-audio-chunks'
AWS_S3_REGION_NAME = 'us-east-1'

# Production/Development configuration


    # Try to load production environment variable
PRODUCTION = os.environ.get('production') == 'True'

print('PRODUCTION' if PRODUCTION else 'RUNNING LOCAL')

if not PRODUCTION:
    # If not found, load from local development file
    try:
        from .localOnly import *
        PRODUCTION = False
        print("Using localOnly.py for configuration")
    except ImportError:
        print("Local variables not available!  Where is localOnly.py?")

print(f"PRODUCTION: {PRODUCTION}")

if not PRODUCTION:
    DEBUG = True # False
    ALLOWED_HOSTS = locals().get('ALLOWED_HOSTS', ['127.0.0.1', 'localhost'])
else:
    SECRET_KEY = os.environ.get('SECRET_KEY')
    ALLOWED_HOSTS = ['*']
    ASSEMBLYAI_API_KEY = os.environ.get('ASSEMBLYAI_API_KEY')
    AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')
    AWS_STORAGE_BUCKET_NAME = os.environ.get('AWS_STORAGE_BUCKET_NAME')
    AWS_S3_REGION_NAME = os.environ.get('AWS_S3_REGION_NAME', 'us-east-1')
    OPENAI_API_KEY = os.environ.get('OPENAI_API_KEY')
    AUDIO_RETENTION_DAYS = os.environ.get('AUDIO_RETENTION_DAYS', '7')

DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
AWS_S3_FILE_OVERWRITE = False  # Don't overwrite files with same name
AWS_DEFAULT_ACL = None  # Use bucket's default ACL
AWS_S3_VERIFY = True

# === CHUNKING APP CONFIGURATION ===

# Preliminary transcription trigger (transcribe after every N chunks)
PRELIMINARY_TRANSCRIPTION_BATCH_SIZE = 1  # Start with 1 for testing, increase to 2-3 for production

# Audio retention policy (days)
CHUNK_AUDIO_RETENTION_DAYS = 7  # How long to keep chunk files
FINAL_AUDIO_RETENTION_DAYS = 7  # How long to keep final complete files

# Presigned URL expiration (seconds)
PRESIGNED_URL_EXPIRATION = 3600  # 1 hour for iOS to upload complete file

# Optional: Use separate buckets for media/static if needed
# STATICFILES_STORAGE = 'storages.backends.s3boto3.S3StaticStorage'

# Media files configuration
MEDIA_URL = f'https://{AWS_STORAGE_BUCKET_NAME}.s3.{AWS_S3_REGION_NAME}.amazonaws.com/'



# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!


# SECURITY WARNING: don't run with debug turned on in production


# Allow larger file uploads for audio chunks
DATA_UPLOAD_MAX_MEMORY_SIZE = 10485760  # 10MB in bytes
FILE_UPLOAD_MAX_MEMORY_SIZE = 10485760  # 10MB in bytes

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'whitenoise.runserver_nostatic',  # For serving static files on Heroku
    'django.contrib.staticfiles',
    'streaming.apps.StreamingConfig',
    'chunking',
    'channels',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'streaming_transcriber.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'streaming_transcriber.wsgi.application'
ASGI_APPLICATION = 'streaming_transcriber.asgi.application'

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels.layers.InMemoryChannelLayer'
    }
}

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Database configuration
if PRODUCTION:
    # Production: Use Heroku PostgreSQL
    import dj_database_url
    DATABASES = {
        'default': dj_database_url.config(default=os.environ['DATABASE_URL'])
    }
else:
    # Development: Use local PostgreSQL
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': locals().get('DATABASE_NAME', 'streaming'),
            'USER': locals().get('DATABASE_USER', 'streamer'),
            'PASSWORD': locals().get('DATABASE_USER_PASSWORD', DATABASE_USER_PASSWORD),
            'HOST': locals().get('DATABASE_HOST', 'localhost'),
            'PORT': locals().get('DATABASE_PORT', '5432'),
        }
    }



# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/New_York'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Static file storage
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Authentication URLs
LOGIN_URL = '/login/'  # or '/login/'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/login/'

# CSRF Settings
CSRF_TRUSTED_ORIGINS = [
    'https://desolate-dawn-05629-57e49d86c525.herokuapp.com',
]

# Also make sure you have these for production:
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')